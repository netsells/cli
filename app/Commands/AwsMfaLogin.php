<?php

namespace App\Commands;

use Symfony\Component\Process\Process;

class AwsMfaLogin extends BaseCommand
{
    /**
     * The signature of the command.
     *
     * @var string
     */
    protected $signature = 'aws:mfa:login';

    /**
     * The description of the command.
     *
     * @var string
     */
    protected $description = 'Handles MFA Login';

    public function configure()
    {
        $this->setDefinition($this->helpers->aws()->commonConsoleOptions());
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        $mfaDevices = $this->helpers->aws()->iam()->listMfaDevices();

        if (count($mfaDevices) === 0) {
            $this->error('No MFA devices for current user.');
            return 1;
        }

        $mfaDevice = $mfaDevices[0];

        if (count($mfaDevices) > 1) {
            $mfaDevice = $this->menu("Choose the MFA device you want to use...", array_combine($mfaDevices, $mfaDevices))
                ->open();
        }

        $code = $this->ask("Please enter the code generated by your MFA device...");

        $envVars = $this->helpers->aws()->iam()->authenticateWithMfaDevice($mfaDevice, $code);

        if (empty($envVars)) {
            $this->error("Unable to authenicate MFA");
            return 1;
        }

        $this->info("Now opening a session following your MFA authentication. Type `exit` to leave this shell.");

        (new Process([config('app.shell')]))
            ->setEnv(array_merge($envVars, [
                'BASH_SILENCE_DEPRECATION_WARNING' => '1',
                'PS1' => "\e[32mnscli\e[34m(mfa-authd)$\e[39m ",
            ]))
            ->setTty(Process::isTtySupported())
            ->setIdleTimeout(null)
            ->setTimeout(null)
            ->run(null);
    }
}
