#!/bin/sh

set -e

IMAGE="netsells/cli"
VERSION="latest"

DOCKER_IMAGE="$IMAGE:$VERSION"


# For the below options parser, use `gengetoptions embed --overwrite docker-support/netsells` to generate it.
# Delete the lines (`[-]?*) set "unknown" "$1"; break ;;`, `echo "$1" >&2` and `exit 1`) at the end of the error case to allow for bad arg pass-through
# to our CLI that handles it's own commands

# @getoptions
parser_definition() {
  setup   REST help:usage -- "Usage: netsells [options]... [arguments]..." ''
  msg -- 'Options:'
  param   TUNNEL_LOCAL_PORT   --tunnel-local-port -- "The local port to tunnel to"
}
# @end

# @gengetoptions parser -i parser_definition parse
# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.0)
TUNNEL_LOCAL_PORT=''
REST=''
parse() {
  OPTIND=$(($#+1))
  while OPTARG= && [ $# -gt 0 ]; do
    case $1 in
      --?*=*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
        ;;
      --no-*|--without-*) unset OPTARG ;;
    esac
    case $1 in
      '--tunnel-local-port')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        TUNNEL_LOCAL_PORT="$OPTARG"
        shift ;;
      --)
        shift
        while [ $# -gt 0 ]; do
          REST="${REST} \"\${$(($OPTIND-$#))}\""
          shift
        done
        break ;;
      *)
        REST="${REST} \"\${$(($OPTIND-$#))}\""
    esac
    shift
  done
  [ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
  case $1 in
    unknown) set "Unrecognized option: $2" "$@" ;;
    noarg) set "Does not allow an argument: $2" "$@" ;;
    required) set "Requires an argument: $2" "$@" ;;
    pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
    notcmd) set "Not a command: $2" "$@" ;;
    *) set "Validation error ($1): $2" "$@"
  esac
}
usage() {
cat<<'GETOPTIONSHERE'
Usage: netsells [options]... [arguments]...

Options:
      --tunnel-local-port TUNNEL_LOCAL_PORT
                              The local port to tunnel to
GETOPTIONSHERE
}
# Generated by getoptions (END)
# @end

parse "$@"

error(){
  error_code=$1
  echo "We had a problem! $2" >&2
  exit $1
}

# Check for docker
which docker > /dev/null 2>&1 || error 1 "🐳 Docker was not found! Please install it and try again."

if [[ $1 == "self-update" ]]
then
    echo "\033[0;31mUpdating CLI docker image...\033[0m"
    docker pull $DOCKER_IMAGE

    echo "\033[0;31mUpdating CLI wrapper...\033[0m"
    docker run \
        --rm \
        --init \
        --entrypoint=/bin/cat \
        $DOCKER_IMAGE \
        /usr/local/bin/netsells-wrapper > $0

    echo "\033[0;31mDone!\033[0m"

    exit 0
fi

if [[ $TUNNEL_LOCAL_PORT ]]
then
    exec docker run \
        --rm \
        --init \
        -it \
        -p $TUNNEL_LOCAL_PORT:$TUNNEL_LOCAL_PORT \
        -v 'sshvol:/root/.ssh' \
        -v $(pwd):/app \
        -v ~/.aws:/root/.aws:ro \
        -v /var/run/docker.sock:/var/run/docker.sock \
        $DOCKER_IMAGE "$@"
else
    exec docker run \
        --rm \
        --init \
        -it \
        -v 'sshvol:/root/.ssh' \
        -v $(pwd):/app \
        -v ~/.aws:/root/.aws:ro \
        -v /var/run/docker.sock:/var/run/docker.sock \
        $DOCKER_IMAGE "$@"
fi
